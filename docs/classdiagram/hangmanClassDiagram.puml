@startuml
package Player {
abstract Player{}
class ListOfPlayer{}
class IA
class Human
}
package game {

interface gamePlayer{
        +Results(): resume
    }
    class Game {
        -gamePlayer: players[]
        +{abstract} resume()
        +{abstract} play()
        +getPlayer(gamePlayerList getPlayer)
    }
    interface gamePlayerList{
            +getPlayerList(int total_Players): gamePlayer[]
    }

package hangman{
class hangedMan{
+public char[] secreteWordSeparatedByHyphens;
separateSecretWordByHyphens(string secretWord):char[]
+giveHint(string secretWord)
}
Interface HangedManPlayer
    class HangMan{
        +HangMan()
        +getAmountOfPlayers():int
        -int maxAttempts
    }

    class Round

    class Turn{
        -WordGiverable wordGiver
        -WordGuesserable wordGuesser
        -HangedMan hangedMan
        +Turn(int maxAttempts, Player[2] players )
    }

    interface WordGiverable{
        +giveWord():String
    }

    interface WordGuesserable{
        +guesseWord():String
        +tryLetter():char
        +askForHint()
    }

    HangedManPlayer ..|> WordGiverable
    HangedManPlayer ..|> WordGuesserable

    Turn *-- WordGiverable
    Turn *-- WordGuesserable
    Turn *-- hangedMan
    Round *-- Turn
    HangMan *-- Player
    HangMan *-- "2" Round




gamePlayer..|> HangedManPlayer
Player ..|> gamePlayer
ListOfPlayer ..|> gamePlayerList
Game..>gamePlayerList
Game..|>HangMan
Game*--gamePlayer
IA--|>Player
Human--|>Player
Turn*--HangedManPlayer


}
}
@enduml